@Library('Jenkins-Shared-Lib') _

pipeline{
    agent any 

    parameters{
        string(name: 'ImageName', description: "Name of Docker Image", defaultValue: 'gowebserver')
        string(name: 'ImageTag', description: "Docker Image Tag", defaultValue: "v${BUILD_NUMBER}")
        string(name: 'DockerHubUserName', description: "Name of Dockerhub user", defaultValue: 'mahakal0510')
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        JENKINS_USER= credentials('jenkins-user')
        JENKINS_USER_TOKEN= credentials('jenkins-user-token')
        JENKINS_IP= credentials('jenkins-ip')
        JENKINS_PORT= credentials('jenkins-port')
        JENKINS_CD_JOB_NAME= 'GO-webserver-CD'
        JENKINS_CD_JOB_TOKEN=  'GO-webserver-CD-Job-Token'
    }

    stages{
        stage('Clean WorkSpace'){
            steps{
                script{
                    cleanWs()
                }
            }
        }
        stage('Git Checkout'){
            steps{
                script{
                    gitCheckout(
                        branch: "main",
                        url: "https://github.com/thakurnishu/GoLang-WebServer.git"
                    )
                }
            }
        }
        stage('Unit Testing'){
            steps{
                script{
                    goTest()
                }
            }
        }
        stage('SonarQube Analysis'){
            steps{
                script{
                    def SonarQube_Server = 'sonar-server'
                    def ProjectKey = 'Go-Server'
                    staticCodeAnalysis(
                        credentialsId: SonarQube_Server,
                        projectKey: ProjectKey
                    )
                }
            }
        }
        stage('Quality Gate Status'){
            steps{
                script{
                    def SonarQube_Token = 'sonar-token'
                    qualityGateStatus(SonarQube_Token)
                }
            }
        }
        stage('GO Build'){
            steps{
                script{
                    def buildName = 'WebServerApp'
                    goBuild(buildName)
                }
            }
        }
        stage('DOCKER Image Build'){
            steps{
                script{
                    dockerBuild("${params.ImageName}","${params.DockerHubUserName}","${params.ImageTag}")
                }
            }
        }
        stage('DOCKER Image Scan: TRIVY'){
            steps{
                script{
                    dockerImageScan("${params.ImageName}","${params.DockerHubUserName}")
                }
            }
        }
        stage('DOCKER Image Push: Dockerhub'){
            steps{
                script{
                    def dockerCredId = 'docker'
                    dockerhubPush("${params.ImageName}", "${params.DockerHubUserName}", "${params.ImageTag}", dockerCredId)
                }
            }
        }
        stage('Triggering CD pipeline'){
            steps{
                script{
                    triggerJenkinsPipeline(
                        jenkinsUser: JENKINS_USER,
                        jenkinsUserToken: JENKINS_USER_TOKEN,
                        jenkinsIP: JENKINS_IP,
                        jenkinsPort: JENKINS_PORT,
                        jenkinsJob: JENKINS_CD_JOB_NAME,
                        jenkinsJobToken: JENKINS_CD_JOB_TOKEN,
                        imageTag: "${params.ImageTag}"
                    )
                }
            }
        }
    }
}