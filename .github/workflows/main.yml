name: CI pipeline for Golang WebSerer

env:
  GO_BUILD_NAME: "WebServerApp"

  SONAR_PROJECTKEY: ${{ secrets.SONAR_PROJECTKEY }}
  SONAR_URL: ${{ secrets.SONAR_URL }}
  SONAR_TOKEN: ${{ secrets.SONARTOKEN }}

  DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
  DOCKERHUB_PASS: ${{ secrets.DOCKERHUB_PASS }}
  IMAGE_NAME: "gowebserver"
  IMAGE_TAG: "v00"

  TRIGGER_REPO_NAME: ${{ secrets.TRIGGER_REPO_NAME }}
  TRIGGER_REPO_OWNER: ${{ secrets.TRIGGER_REPO_OWNER }}
  TRIGGER_REPO_PAT_TOKEN: ${{ secrets.TRIGGER_REPO_PAT_TOKEN }}
  TRIGGER_EVENT_TYPE: "triggering-cd-workflow"

on: push

jobs:

    # Build: 
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Building GO Executable binary
    #           run: /usr/local/go/bin/go build -o ${GO_BUILD_NAME}

    # Unit-Testing:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Testing Go code
    #           run : /usr/local/go/bin/go test -count=1
    #     needs: [Build]
    
    # Sonar-Scanning:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: SonarQube Analysis
    #           run: |
    #             sonar-scanner \
    #             -Dsonar.projectKey=${SONAR_PROJECTKEY} \
    #             -Dsonar.sources=. \
    #             -Dsonar.host.url=${SONAR_URL} \
    #             -Dsonar.login=${SONAR_TOKEN} 
    #     needs: [Unit-Testing]

    # Build-Image:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Builing Docker Image
    #           run: |
    #             docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME} .
    #             docker image tag ${DOCKERHUB_USER}/${IMAGE_NAME} ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
    #             docker image tag ${DOCKERHUB_USER}/${IMAGE_NAME} ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
    #     needs: [Sonar-Scanning]
    
    # Image-Scan:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Image Scanning With Trivy
    #           run: |
    #             trivy image ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} > scan.txt
    #             cat scan.txt
    #     needs: [Build-Image]

    # Push-Image:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Push Images to DockerHub
    #           run: |
    #             docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
    #             docker image push ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
    #             docker image push ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
    #         - name: Remove Images
    #           run: |
    #             docker rmi ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG}
    #             docker rmi ${DOCKERHUB_USER}/${IMAGE_NAME}:latest
    #     needs: [Image-Scan]

    Trigger-CD-Workflow:
        runs-on: [self-hosted, Linux, X64, Laptop]
        steps:
          - name: Triggering CD pipeline
            run: |
              ls -la ${GITHUB_WORKSPACE}/.github/workflows

    # Trigger-CD-Workflow:
    #     runs-on: [self-hosted, Linux, X64, Laptop]
    #     steps:
    #         - name: Triggering CD Pipeline
    #           run: |
    #             curl -L \
    #             -X POST \
    #             -H "Accept: application/vnd.github+json" \
    #             -H "Authorization: Bearer ${TRIGGER_REPO_PAT_TOKEN}" \
    #             -H "X-GitHub-Api-Version: 2022-11-28" \
    #             https://api.github.com/repos/${TRIGGER_REPO_OWNER}/${TRIGGER_REPO_NAME}/dispatches \
    #             -d '{"event_type": "${TRIGGER_EVENT_TYPE}", "client_payload": {"imageTag": "${IMAGE_TAG}", "imageName": "${IMAGE_NAME}"}}'
        # needs: [Push-Image]